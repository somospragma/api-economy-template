AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function.
Resources:
  PaymentService:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'payment'
      Runtime: python3.9
      Role: !GetAtt PaymentServiceRole.Arn
      Handler: index.lambda_handler
      Timeout: 180
      Code:
        ZipFile: |
          import time
          def lambda_handler(event, context):
              #time.sleep(27)
              return {
                  'statusCode': 200,
                  'body': 'Your payment has been done successfully'
              }

      Description: Function.
      TracingConfig:
        Mode: Active
  PaymentServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  PaymentLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:   
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          - !Ref PaymentService
      RetentionInDays: 7
  PaymentXRayGroup:
      Type: AWS::XRay::Group
      Properties:
         GroupName: PaymentXRayGroup
         FilterExpression: duration > 10
         InsightsConfiguration:
            InsightsEnabled: false
            NotificationsEnabled: false
  MultitenantUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UsernameAttributes: 
        - 'email'
      UserPoolName: 'multitenant-user-pool'
  MultitenantUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: 'multitenant-user-pool-client'
      UserPoolId: !Ref MultitenantUserPool
      ExplicitAuthFlows: 
        - 'ADMIN_NO_SRP_AUTH'
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: 
        - 'code'
        - 'implicit'
      AllowedOAuthScopes: 
        - 'openid'
        - 'profile'
        - 'email'
      SupportedIdentityProviders: 
        - 'COGNITO'
      CallbackURLs: 
        - 'https://example.com/callback'
      PreventUserExistenceErrors: 'ENABLED'
  PaymentUserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: 'payment-example-domain'
      UserPoolId: !Ref MultitenantUserPool
  ExampleUser:
    Type: AWS::Cognito::UserPoolUser
    Properties: 
      Username: 'example@pragma.com.co'
      UserPoolId: !Ref MultitenantUserPool
  ApiCloudWatchRole: 
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                - 
                    Effect: "Allow"
                    Principal: 
                        Service: 
                            - "apigateway.amazonaws.com"
                            - "lambda.amazonaws.com"
                    Action: 
                        - "sts:AssumeRole"
  ApiCloudWatchPolicy:
      Type: 'AWS::IAM::Policy'
      DependsOn: 
          - ApiCloudWatchRole
      Properties:
          PolicyName: 'ApiCloudWatchPolicy'
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  - Effect: Allow
                    Action:
                      - 'logs:CreateLogGroup'
                      - 'logs:CreateLogStream'
                      - 'logs:DescribeLogGroups'
                      - 'logs:DescribeLogStreams'
                      - 'logs:PutLogEvents'
                      - 'logs:GetLogEvents'
                      - 'logs:FilterLogEvents'
                    Resource: '*'
          Roles: 
              - Ref: "ApiCloudWatchRole"
  AccountApi: 
      Type: AWS::ApiGateway::Account
      DependsOn: 
          - ApiCloudWatchPolicy
      Properties: 
          CloudWatchRoleArn: !GetAtt ApiCloudWatchRole.Arn
  PaymentRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
          Body:
              swagger: 2
              info:
                  version: '0.0.1'
                  title: 'payment'
              basePath: '/payment'
              schemes: 
                  - 'https'
              definitions: 
                  Empty: 
                      type: 'object'
          Name: 'payment'
          Parameters: 
              endpointConfigurationTypes: 'REGIONAL'
  ProxyResource: 
      Type: AWS::ApiGateway::Resource
      Properties: 
          RestApiId: 
              !Ref PaymentRestApi
          ParentId: 
              !GetAtt 
                  - PaymentRestApi
                  - RootResourceId
          PathPart: 'payment'
  PaymentDeployment: 
      Type: AWS::ApiGateway::Deployment
      DependsOn: 
          - PaymentMethod
      Properties:
          RestApiId: 
              !Ref PaymentRestApi
          Description: 'My deployment'
  PaymentMethod:
      Type: AWS::ApiGateway::Method
      Properties:
          ApiKeyRequired: true
          RestApiId: 
              !Ref PaymentRestApi
          ResourceId:
              !Ref ProxyResource
          HttpMethod: 'GET'
          AuthorizationType: 'COGNITO_USER_POOLS'
          AuthorizerId: !Ref PaymentAuthorizer
          Integration: 
              Type: 'AWS_PROXY'
              IntegrationHttpMethod: 'POST'
              Uri: 
                  !Sub
                      - 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function}/invocations'
                      - { Function: !GetAtt PaymentService.Arn }  
  PaymentServicePermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
          FunctionName: !Ref PaymentService
          Action: lambda:InvokeFunction
          Principal: apigateway.amazonaws.com
          SourceAccount: !Ref 'AWS::AccountId'
          SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PaymentRestApi}/*/*/*'
  PaymentAuthorizer:
      Type: 'AWS::ApiGateway::Authorizer'
      Properties:
          Type: COGNITO_USER_POOLS
          IdentitySource: method.request.header.Authorization
          Name: PaymentAuthorizer
          RestApiId: !Ref PaymentRestApi
          ProviderARNs: 
              - !GetAtt MultitenantUserPool.Arn
  Prod: 
      Type: AWS::ApiGateway::Stage
      Properties: 
          StageName: prod
          Description: Prod Stage
          RestApiId: !Ref PaymentRestApi        
          DeploymentId: !Ref PaymentDeployment
          Variables: 
              Stack: Prod
          MethodSettings: 
              - ResourcePath: /payment
                HttpMethod: GET
                MetricsEnabled: 'true'
                LoggingLevel: 'INFO'
                DataTraceEnabled: 'true'
          TracingEnabled: true
  PaymentUsagePlan:
      Type: 'AWS::ApiGateway::UsagePlan'
      Properties:
        ApiStages:
          - ApiId: !Ref PaymentRestApi
            Stage: !Ref Prod
        Description: Payment usage plan
        Quota:
          Limit: 20
          Period: MONTH
        Throttle:
          BurstLimit: 20
          RateLimit: 20
        UsagePlanName: Payment_Usage_Plan
  PaymentApiKey:
      Type: 'AWS::ApiGateway::ApiKey'
      Properties:
        Name: plan1_key
        Description: Payment API Key V1
        Enabled: true
        StageKeys:
          - RestApiId: !Ref PaymentRestApi
            StageName: !Ref Prod
  PaymentUsagePlanKey:
      Type: 'AWS::ApiGateway::UsagePlanKey'
      Properties:
        KeyId: !Ref PaymentApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref PaymentUsagePlan
  DevOpsGuruResourceCollection: 
      Type : 'AWS::DevOpsGuru::ResourceCollection'
      Properties : 
        ResourceCollectionFilter : 
          CloudFormation:
            StackNames: 
              - "*"
  PaymentSchedulerRole: 
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "scheduler.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
  PaymentSchedulerPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: 'PaymentSchedulerPolicy'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - !GetAtt PaymentService.Arn
        Roles: 
          - Ref: "PaymentSchedulerRole"
  PaymentScheduledTrigger:    
      Type: AWS::Scheduler::Schedule
      Properties: 
        Description: 'Event Bridge to trigger payment service'
        FlexibleTimeWindow: 
          Mode: 'OFF'
        Name: 'EventBridgeToTriggerPaymentService'
        ScheduleExpression: rate(1 minutes)
        State: 'ENABLED' 
        Target: 
          Arn: !GetAtt PaymentService.Arn
          RoleArn: !GetAtt PaymentSchedulerRole.Arn
